local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "Rukia Hub",
	LoadingTitle = "Rukia Hub",
	LoadingSubtitle = "by rukia",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "Rukia Hub",
		FileName = "Rukia Hub"
	},
	KeySystem = true, -- Set this to true to use their key system
	KeySettings = {
		Title = "Rukia Hub",
		Subtitle = "Key System",
		Note = "Join the discord (.gg/)",
		SaveKey = true,
		Key = "EXCLUSIVEKEY449", "ex"
	}
})

Rayfield:Notify("Title Example", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Section Example")

local Button = Tab:CreateButton({
	Name = "NoFall",
	Callback = function(value)
		game.ReplicatedStorage.FallDamage:Destroy(value)
	end,
})

local Button = Tab:CreateButton({
	Name = "Respawn",
	Callback = function(value)
game.Players.LocalPlayer.Character.Humanoid.Health = 0
	end,
})

local Dropdown = Tab:CreateDropdown({
	Name = "Dropdown Example",
	Options = {"Option 1","Option 2"},
	CurrentOption = "Option 1",
	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
	  	  -- The function that takes place when the selected option is changed
    	  -- The variable (Option) is a string for the value that the dropdown was changed to
	end,
})

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

local walkSpeed = 50
local jumpPower = 50
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local speedToggle = false

local Slider = PlayerTab:CreateSlider({
	Name = "Speed Value",
	Range = {16, 250},
	Increment = 10,
	Suffix = "WalkSpeed",
	CurrentValue = 16,
	Flag = "SpeedValue",
	Callback = function(value)
        walkSpeed = value
	end,
})

local Toggle = PlayerTab:CreateToggle({
	Name = "Speed",
	CurrentValue = false,
	Flag = "Speed", 
	Callback = function(value)
        speedToggle = value
	end,
})

RS.RenderStepped:Connect(function()
    if speedToggle then
        local moveVector = Vector3.new(0, 0, 0)
        local camera = workspace.CurrentCamera
        local forward = camera.CFrame.LookVector
        local right = camera.CFrame.RightVector
        for _, key in ipairs(UIS:GetKeysPressed()) do
            if key.KeyCode == Enum.KeyCode.W then
                moveVector = moveVector + forward
            elseif key.KeyCode == Enum.KeyCode.A then
                moveVector = moveVector - right
            elseif key.KeyCode == Enum.KeyCode.S then
                moveVector = moveVector - forward
            elseif key.KeyCode == Enum.KeyCode.D then
                moveVector = moveVector + right
            end
        end
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        if moveVector.magnitude > 0 then
            humanoid:Move(moveVector, false)
        end
        humanoid.WalkSpeed = walkSpeed
        humanoid.JumpPower = jumpPower
    end
end)

local isEnabled = false
_G.JP = 50

local Slider = PlayerTab:CreateSlider({
	Name = "JumpPower Value",
	Range = {16, 250},
	Increment = 10,
	Suffix = "JumpPower",
	CurrentValue = 0,
	Flag = "JumpPower",
	Callback = function(value)
	_G.JP = value
	end,
	    AllowDuplicateCalls = true
})

local Toggle = PlayerTab:CreateToggle({
	Name = "JumpPower",
	CurrentValue = false,
	Flag = "JumpPowerToggle", 
	Callback = function(value)
    isEnabled = value
  
        if isEnabled then
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local old = mt.__newindex
            
            mt.__newindex = newcclosure(function(o, k, v)
                if isEnabled and tostring(o) == "Humanoid" and tostring(k) == "JumpPower" then
                    return old(o, k, _G.JP)
                end
                
                return old(o, k, v)
            end)
        else
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = _G.JP
        end
	end,
})

local Slider = PlayerTab:CreateSlider({
	Name = "Fly Speed",
	Range = {0, 250},
	Increment = 10,
	Suffix = "Flight Speed",
	CurrentValue = 0,
	Flag = "FlightSpeed",
	Callback = function(value)
		flySpeed = value
	end,
})

local Toggle = PlayerTab:CreateToggle({
	Name = "Fly",
	CurrentValue = false,
	Flag = "Fly", 
	Callback = function(value)
		Fly = value
	end,
})

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")

end)

game:GetService("RunService").RenderStepped:Connect(function()
    if Fly then
        local char = game:GetService("Players").LocalPlayer.Character
        local lookVector = (game:GetService("Workspace").CurrentCamera.Focus.p - game:GetService("Workspace").CurrentCamera.CFrame.p).Unit
        local velocity = Vector3.new()
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
            velocity = velocity + lookVector * flySpeed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
            velocity = velocity - lookVector * flySpeed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
            velocity = velocity - Vector3.new(-lookVector.Z, 0, lookVector.X) * flySpeed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
            velocity = velocity + Vector3.new(-lookVector.Z, 0, lookVector.X) * flySpeed
        end
        char.HumanoidRootPart.Velocity = velocity
    end
end)

local VisualsTab = Window:CreateTab("Visuals", 4483362458) -- Title, Image

local NPCESPEnabled = false
local TextSize = 12

function createNPCBillboard(npcModel)
    local BillboardGui = Instance.new("BillboardGui", npcModel)
    BillboardGui.Name = "NPCESP"
    BillboardGui.AlwaysOnTop = true
    BillboardGui.LightInfluence = 1
    BillboardGui.Size = UDim2.new(0, 100, 0, 50)
    BillboardGui.StudsOffset = Vector3.new(0, 3, 0)

    local TextLabel = Instance.new("TextLabel", BillboardGui)
    TextLabel.BackgroundTransparency = 1
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0, 0, 0, 0)
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = npcModel.Name
    TextLabel.TextColor3 = Color3.new(1, 1, 1)
    TextLabel.TextSize = TextSize
    TextLabel.TextStrokeTransparency = 0.5
    TextLabel.TextWrapped = true

    return BillboardGui
end

function createAllNPCBillboards()
    for _, npcModel in ipairs(game.Workspace.NPCs:GetChildren()) do
        createNPCBillboard(npcModel)
    end
end

function toggleNPCESP(enabled)
    for _, npcModel in ipairs(game.Workspace.NPCs:GetChildren()) do
        local billboardGui = npcModel:FindFirstChild("NPCESP")
        if enabled then
            if not billboardGui then
                createNPCBillboard(npcModel)
            else
                billboardGui.Enabled = true
            end
        else
            if billboardGui then
                billboardGui.Enabled = false
            end
        end
    end
end

local Toggle = VisualsTab:CreateToggle({
	Name = "NPC ESP",
	CurrentValue = false,
	Flag = "NPCESP", 
	Callback = function(value)
	 NPCESPEnabled = value
        toggleNPCESP(NPCESPEnabled)
	end,
})

local FunTab = Window:CreateTab("Fun", 4483362458) -- Title, Image

local Button = FunTab:CreateButton({
	Name = "Lag Script",
	Callback = function(value)
loadstring(game:HttpGet("https://raw.githubusercontent.com/flowersblade/tokyo/main/lag%20script"))()
	end,
})

local OtherTab = Window:CreateTab("Other", 4483362458) -- Title, Image

local Button = OtherTab:CreateButton({
	Name = "Infinite Yield FE",
	Callback = function(value)
loadstring(game:HttpGet("https://raw.githubusercontent.com/flowersblade/tokyo/main/infinite%20yield%20fe"))()
	end,
})
